'''
Декоратор сам по собі являє обгортку для функції або методу класу
за допомогою декораторів ми можемо добавити додатковий функціонал
спільний для різних функцій (наприклад таймер який буде вираховувати
час за який виконується функція)
в Python декопатори реалізовані на рівні синтаксису на відміну від деяких
С подібних мов програмування (С++, С#, Java)
'''


# Приклад декоратора

def makebold(fn):
    def wrapped():
        return "<b>" + fn() + "</b>"

    return wrapped


def makeitalic(fn):
    def wrapped():
        return "<i>" + fn() + "</i>"

    return wrapped


@makebold
@makeitalic
def hello():
    return "hello habr"


print(hello())

'''
Декоратори активно використовуються в фреймворках таких як django та flask
наприклад щоб перешкодити Анонімному користувачеві доступ до якогось 
функціоналу можна використати декоратор login_required або permission_required
у flask декоратори використовуються роутів (@route...)
'''
